<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-type" content="text/html;charset=UTF-8">
		<title>TSDSFE</title>

		<link rel="stylesheet" href="css/jquery-ui-1.9.2.css">
		<link rel="stylesheet" type="text/css" href="css/gui.css">
		<link rel='shortcut icon' type='image/x-icon' href='css/images/favicon.ico' />

		<script type="text/javascript" src="js/deps/jquery-1.8.3.min.js"></script>
		<script type="text/javascript" src="js/deps/jquery-ui-1.9.2.js"></script>
		<script type="text/javascript" src="js/deps/date.js"></script>
		<script type="text/javascript" src="js/deps/jquery.query-2.1.3.js"></script>
		<script type="text/javascript" src="js/deps/jquery.ba-hashchange-1.3.js"></script>
		<script type="text/javascript" src="js/jquery.scrollTo-min.js"></script>
		<script type="text/javascript" src="js/dropdown2.js"></script>
		<script type="text/javascript" src="js/fittext.js"></script>
		<script type="text/javascript" src="examples/examples.js"></script>
		<script>

			//To catch uncaught errors.
			//window.onerror = function (message, filename, linenumber) {alert(message)}

			var TSDSFE = location.href.split("#")[0];

			$(function() {

				// Check status of TSDS server dependencies and
				// data servers with tests that run servers.js
				checkstatus();
				setInterval(checkstatus,10000);

				main();
				//var FONTS = [];
				//var COLORS = {};
				//$.getJSON( "js/css-color-names.json", function( data ) {COLORS=data;});
				//$.getJSON( "js/autoplotserverfonts.json", function( data ) {FONTS=data;});
			})

			function main() {

				hashchange();

				if (location.hash.match(/^#uri=/)) {
					var uri = "?dd=" 
						+ encodeURIComponent(location.hash.replace(/^#/,"")) 
						+ "&return=tsds&format=json"

					var res = tsdsfeajax(uri);

					$('#ddinfo').show();
					$('#ddinfo input')
						.attr("value",location.hash.replace(/^#/,""));

					$('#ddinfo #link')
						.attr("href","catalogs/dd/" + res["catalog"]["$"]["id"] + ".json");

					$( "#trydd").unbind("click");
					$('#trydd').click(function () {
						location.hash = $('#ddinfo input').attr("value");
						main();
					})

					console.log(res)
					location.hash = "catalog=" + res["catalog"]["$"]["id"];
					main();

					return;
				}

				// qs is query string object based on parsing query parameters
				// following hash in URL.
				if (location.hash === "") {
					var qs = {}
				} else {
					var qs = $.parseQueryString()
				}

				// Show Clear button and Options link.
				$('#clear').show();
				$('#options').show();

				// Show/Hide cache checkboxes
				$('#cachecheckboxeslink').click(function () {
					$("#cachecheckboxes").toggle()
				})
				
				// Default for using data cache is true.
				// Unselect checkbox if usedatacache=false is in URL.
				if (location.hash.match("usedatacache=false")) {
					$('#usedatacache').each(function(){ this.checked = false })
					qs["usedatacache"] = "false"; 
					// Put usedatacach=false into location.hash.
					location.hash = decodeURIComponent($.param(qs))
				} else {
					$('#usedatacache').each(function(){ this.checked = true })
					qs["usedatacache"] = "true"
				}
				
				// Default for usemetadatacache checkbox.
				$('#usemetadatacache').each(function(){ this.checked = true })

				// Default for useimagecache checkbox.
				$('#useimagecache').each(function(){ this.checked = true })

				// Create the first drop-down (subsequent drop-downs appear when something is selected).
				dropdown2(
					["catalog","dataset","parameters","start","stop","return","format","type","style"],
					["Catalog","Datasets","Parameters","Start","Stop","Return","Format","Type","Style"],
					[catalogs,datasets,parameters,starttime,stoptime,returntype,format,type,style],
					"#dropdowns");

				// If initial URL has arguments after #, trigger select on dropdowns.
				if ( location.hash !== "" && location.hash !== "#catalog=^.*" ) {
					console.log("Triggering select because initial hash given.")
					triggerselect()
				}			

				// Show examples drop-down in element with id = dropdownstest
				dropdown2(["examples"],["Examples"],[examples],"#dropdownstest");

				return;									
			}

			// See Harris' post at 
			// http://stackoverflow.com/questions/426258/how-do-i-check-a-checkbox-with-jquery-or-javascript
			// Deal with checkboxes.
			(function( $ ) {
				$.fn.checked = function(value) {
					if(value === true || value === false) {
						// Set the value of the checkbox
						$(this).each(function(){ this.checked = value; });
					} 
					else if(value === undefined || value === 'toggle') {
						// Toggle the checkbox
						$(this).each(function(){ this.checked = !this.checked; });
					}
				};
			})( jQuery );

			// http://paulgueller.com/2011/04/26/parse-the-querystring-with-jquery/
			// parseQueryString()
			jQuery.extend({
				  parseQueryString: function(){
					var nvpair = {};
					var qs = window.location.hash.replace('#', '');
					var pairs = qs.split('&');
					$.each(pairs, function(i, v){
					  var pair = v.split('=');
					  nvpair[pair[0]] = pair[1];
					});
					return nvpair;
				  }
			});

			// Show results from checkstatus().
			function showstatus() {
				var catalog = selected('catalog')

				if (typeof(catalog) === 'undefined') return 

				if (!checkstatus.servers) {
					$('#cataloginfo ul #statustrue').remove()
					$('#cataloginfo ul #statusfalse').remove()
					$('#cataloginfo ul').append('<li id="statusfalse"><i>Data servers are not being monitored.</i></li>');
					return
				}

				var url = "?dd=" + 
						encodeURIComponent
							(
								"uri="
								+ location.origin + location.pathname
								+ "log/servers/"
								+ catalog
								+ "/$Y-$m-$d.txt"
								+ "&start=-P10D"
								+ "&stop=P1D"
								+ "&columns=2"
								+ "&columnIDs=ResponseTime"
								+ "&columnUnits=ms"
								+ "&catalogLabel=" + catalog + " server monitor"
							)
						+ "&dataset=1"
						+ "&parameters=ResponseTime"
						+ "&start=-P10D"
						+ "&stop=P1D"
						+ "&return=image"

				//console.log(checkstatus.servers)
				if (!checkstatus.servers.hasOwnProperty(catalog)) {
					$('#cataloginfo ul #statustrue').remove()
					$('#cataloginfo ul #statusfalse').remove()
					$('#cataloginfo ul')
						.append(
								 '<li id="statusfalse">'
								+ '<i>'
								+ 'Server for data in this catalog is not being monitored.'
								+ '</i>'
								);
				} else if (checkstatus.servers[catalog] === "") {
					$('#cataloginfo ul #statustrue').remove()
					$('#cataloginfo ul #statusfalse').remove()
					$('#cataloginfo ul').append('<li id="statusfalse">'
						+ '<i>Server for data in this catalog is not currently '
						+ 'being monitored.'
						+ '</i>'
						+ ' <a href="'+url+'">History</a>'
						+ '</li>');
				} else if (checkstatus.servers[catalog].state == false) {
					$('#cataloginfo ul #statustrue').remove()
					if ($('#cataloginfo ul #statusfalse').length == 0) {
						$('#cataloginfo ul').append(
							'<li id="statusfalse">'
							+ '<span style="background-color:yellow">'
							+ checkstatus.servers[catalog].message
							+ '</span>'
							+ ' 	<a href="'+url+'">History</a></li>');
					}
				} else {
					var delta = (new Date).getTime()
									-checkstatus.servers[catalog].lastcheck;
					$('#cataloginfo ul #statusfalse').remove();
					 var title = 'Last check '
					 		+ Math.round(delta/1000)
					 		+ ' seconds ago.  Check interval is '
					 		+ checkstatus.servers[catalog].checkperiod/1000
					 		+ ' seconds.'
					if ($('#cataloginfo ul #statustrue').length == 0) {

						$('#cataloginfo ul')
							.append(
										'<li id="statustrue">'
										+ '<span title="'+title+'"">'
										+ catalog+' server working. '
										+ '<a href="'+url+'">History</a></li>'
									);
					} else {
						$('#cataloginfo ul #statustrue span').attr('title',title)
					}
				}
			}

			// Make periodic requests for TSDSFE server and dependency status.
			function checkstatus(catalog) {
				if (!checkstatus.deps) checkstatus.deps = {}
				if (!checkstatus.servers) checkstatus.servers = {}
				//console.log("Checking status of servers and deps.");
				$.ajax({
					type: "GET",
					url: TSDSFE + "status",
					async: true,
					dataType: "json",
					success: function (data,textStatus, jqXHR) {
						//console.log(data)

						if (!data.deps["active"]) {
							$("#warning")
								.text("Note that TSDS server dependencies are not enabled.  Requests for plots and data may not work.");
							$("#warningdiv").show()
							return
						} else {
							delete data.deps["active"]
							$("#warning").text("")
							$("#warningdiv").hide()
						}
							
						checkstatus.servers = data.servers
						checkstatus.deps = data.deps
						
						showstatus()
						
						for (key in checkstatus.deps) {
							if (!checkstatus.deps[key].state) {
									if ($("#statusinfo ul").find("#"+key).length == 0) {
										$("#statusinfo ul").append("<li id='"+key+"'>" + checkstatus.deps[key].message + "</li>")
										$("#statusinfo").show();
									}
								} else {
									$("#statusinfo ul").find("#"+key).remove();
								}
							}
							if ($("#statusinfo ul li").length == 0) {
								$("#statusinfo").hide();
							}
						}
					})
			}

			// Monitor hash for changes via text entry in address bar.
			function hashchange() {
				// The following code needs work.

				// Update drop-downs when URL is changed manually.
				console.log("Binding hashchange");
				$(window).hashchange.byurledit = true;
				$(window).bind("hashchange",function() {
					
					//$(window).hashchange.lashash = qs; 
					// Need to figure out what parameter was changed and then remove all parameters after that.  Otherwise user could change the catalog and the parameter list will not be updated.
					console.log("--- Hash change");
					console.log("--- by urledit = " + $(window).hashchange.byurledit);
					var qs = $.parseQueryString();

					for (var id in qs) {
						console.log("id in query string = " + qs[id])
						console.log("id selected value  = " 
							+ $('#' + id).parent().parent().attr('value'))
						if (qs[id] !== $('#' + id).parent().parent().attr('value')) {
							console.log('--- id changed');
						}
					}

					if ($(window).hashchange.byurledit) {
						console.log("Hash change made by manual edit to URL");
						console.log("Last hash")
						console.log(qs);
						for (var id in qs) {
							console.log("Triggering: " + qs[id]);
							$("#"+id)
								.val(qs[id])
								.data("autocomplete")
								._trigger("select",event,{item:qs[id]});
						}
					}					
					$(window).hashchange.byurledit = true;
				});	
			}

			// Trigger a select event on a drop-down.
			function triggerselect() {
				// Set inital values of drop-downs based on hash.
				qs = $.parseQueryString();
				console.log("Initial query string: " + JSON.stringify(qs));
				if (qs["catalog"]) {
					if (qs["catalog"] === "^.*") return;
				}		
				for (var id in qs) {
					console.log("Triggering select for drop-down with id = " + id);
					$("#" + id).val(qs[id])
								.data("autocomplete")
								._trigger("select", event, {item: qs[id]})
				}
			}

			// Get data.  TODO: Make this async.
			function tsdsfeajax(url) {

				url = TSDSFE + url;
				$('#status').show();

				// TSDSFE default is usemetadatacache=true.  Must explicity
				// set in URL otherwise.
				if (!$("#usemetadatacache").is(":checked")) {
					url = url + "&usemetadatacache=false";
				}

				// Client-side cache of response.
				if (typeof(tsdsfeajax.cache) === "undefined") {
					tsdsfeajax.cache = {};
				}
				if (tsdsfeajax.cache[url]) {
					console.log("tsdsfeajax(): Client-side cache hit.");
					var urlx = url.replace("&para","&#38;para");
					var text = "Received <a target='_blank' title='"+url+"' href='" + url + "'>{{SHRINK}}</a>"
					fittext("status", text, urlx, "infodiv");
					return $.parseJSON(tsdsfeajax.cache[url]);
				}
				$('#status').html("Requesting " + url);
				console.log("tsdsfeajax(): Requesting " + url);

				var err = false;
				$.ajax({
					type: "GET",
					url: url,
					async: false,
					dataType: "text",
					success: function (data, textStatus, jqXHR) {
						console.log("tsdsfeajax(): Response from " + url);
						//$('#ready'+i).show();
						if (!data.match(/^\s*\[|^\s*\{/)) {
							console.log("tsdsfeajax(): Comma separated list received.  Converting to an array.")
							xret = data.replace(/,$/,"").replace(/\n/,'').split(",");
						} else {
							xret = data;
						}
						var urlx = url.replace("&para","&#38;para");
						var text = "Received info from "
								+ "<a target='_blank' title='"+url+"' href='" + url  + "'>{{SHRINK}}</a>";

						fittext("status", text, urlx, "infodiv");
						//$('#status').html(textr);
						// Hide status information.
						//setTimeout(function () {$('#status').html("")}, 3000);
					},
					error: function (xhr, textStatus, errorThrown) {
						err = true;
						errmsg = xhr.responseText;
						$('#error').html("Error encountered when attempting to retrieve <a target='_blank' href='" 
											+ url + "'>"
											+ url.replace("&para","&#38;para")+"</a>"
											+ ".<br>Message: " + errmsg);
						$('#errordiv').show();
					}
				});

				if (err) {
					// Cache response.
					console.log("Error. Returning message: " + errmsg)
					tsdsfeajax.cache[url] = errmsg;
					return errmsg;
				} else {
					// Cache response.
					tsdsfeajax.cache[url] = xret;
					return $.parseJSON(xret);
				}
			}

			// Determine selected value for a drop-down.	
			function selected(name) {
				// Determine the value selected.

				//console.log("selected(): Determining selected value for " + name + " using dropdown.  Value = "+$("span[name='"+name+"']").attr('value'));

				// When drop-down value is selected, URL should be up-to-date.  Use
				// value in URL.
				if (location.hash !== "") {
					var qs = $.parseQueryString();
					if (qs[name]) {
						//console.log("selected(): Determining selected value for " + name + " using hash.  Value = "+qs[name]);
						return qs[name];
					}
				}

				return $("span[name='"+name+"']").attr('value');
			}

			// Hide divs based on drop-down state.
			// TODO: This needs clean-up and refactoring.
			function hidedivs(selected) {
				if (selected === "catalogs") {
					$('#datasetinfo').html("");
					$('#parameterinfo').html("");
					$('#returninfo').hide();
					$('#formatinfodata').hide();
					$('#formatinfoscript').hide();
					$('#formatinfoimage').hide();
					$('#styleinfoimage').hide();
					$('#styleinfodata').hide();
					$('#scriptdiv').hide();
					$('#datadiv').hide();
					$('#imagediv').hide();
					$('#imagediv a').attr("src","");
					$('#gallerydiv').hide();
					$('#gallerydiv iframe').attr("src","");
					$('#gallerydiv a').attr("src","");
					$('#overviewdiv').hide();
					$("#error").html("");
					$("#errordiv").hide();
				}
				if (selected === "datasets") {
					$('#parameterinfo').html("");
					$('#returninfo').hide();
					$('#formatinfodata').hide();
					$('#formatinfoscript').hide();
					$('#formatinfoimage').hide();
					$('#styleinfoimage').hide();
					$('#styleinfodata').hide();
					$('#scriptdiv').hide();
					$('#datadiv').hide();
					$('#imagediv').hide();
					$('#imagediv a').attr("src","");
					$('#gallerydiv').hide();
					$('#gallerydiv iframe').attr("src","");
					$('#gallerydiv a').attr("src","");
					$('#overviewdiv').hide();
					$("#error").html("");
					$("#errordiv").hide();
				}
				if (selected === "parameters") {
					$('#returninfo').hide();
					$('#formatinfodata').hide();
					$('#formatinfoscript').hide();
					$('#formatinfoimage').hide();
					$('#styleinfoimage').hide();
					$('#styleinfodata').hide();
					$('#scriptdiv').hide();
					$('#datadiv').hide();
					$('#imagediv').hide();
					$('#imagediv a').attr("src","");
					$('#gallerydiv').hide();
					$('#gallerydiv iframe').attr("src","");
					$('#gallerydiv a').attr("src","");
					$('#overviewdiv').hide();
					$("#error").html("");
					$("#errordiv").hide();
				}
				if (selected === "return") {
					$("#typeinfoimage").hide();
					$('#formatinfodata').hide();
					$('#formatinfoscript').hide();
					$('#formatinfoimage').hide();
					$('#styleinfoimage').hide();
					$('#styleinfodata').hide();
					$('#scriptdiv').hide();
					$('#datadiv').hide();
					$('#imagediv').hide();
					$('#imagediv a').attr("src","");
					$('#gallerydiv').hide();
					$('#gallerydiv iframe').attr("src","");
					$('#gallerydiv a').attr("src","");
					$('#overviewdiv').hide();
				}
				if (selected === "format") {
					$('#styleinfoimage').hide();
					$('#styleinfodata').hide();
					$('#imagediv').hide();
					$('#imagediv a').attr("src","");
					$('#gallerydiv').hide();
					$('#gallerydiv iframe').attr("src","");
					$('#gallerydiv a').attr("src","");
					$('#overviewdiv').hide();
				}
			}
			
			// Handle catalog drop-down.
			function catalogs() {

				catalogs.onselect = function () {

					// Triggered when a catalog is selected in drop-down.
					console.log("catalogs.onselect(): Called")
					
					var url = "?catalog=" + selected('catalog')
					
					info = tsdsfeajax(url);

					if (typeof(info) == "string") {
						// Error.
						return info;
					}

					catalog.info = info;
					$('#cataloginfo').html("<b>Catalog information:</b>");
					if (info.length > 0) {
						$('#cataloginfo')
							.append('<ul style="list-style-position:outside;">')
						$('#cataloginfo ul')
							.append('<li attr="catalogid">TSDS ID: ' +selected('catalog')+'</li>')

						//console.log("Info: " + info[0].title);
						for (j = 0;j < info.length;j++) {
							if (!(info[j].title === "") && !(info[j].link === "")) {
								$('#cataloginfo ul').append('<li style=""><a href="'+info[j].link+'" title="'+info[j].link+'">'+info[j].title+'</a></li>');
							} else if ((info[j].title === "") && !(info[j].link === "")) {
								$('#cataloginfo ul').append('<li style=""><a href="'+info[j].link+'" title="'+info[j].link+'">'+info[j].link+'</a></li>');
							}
						}
						var loglink = TSDSFE + "?catalog="+selected('catalog')+"&return=log";
						$('#cataloginfo ul')
							.append('<li style=""><a href="'+loglink+'" title="'+loglink+'">History of TSDSFE requests with this catalog.</a></li>')

					} else if (info.length == 0) {
						$('#cataloginfo').append('<ul style="list-style-position: outside;">');	
						$('#cataloginfo ul').append('<li style="">Catalog <b>' + selected("catalog") + '</b> was not found in <a href="' +  TSDSFE + '?catalogs=^.*">catalog list</a></li>');
					}
					$('#catalogtinfo ul').append('</ul>');

					$('#cataloginfo').show();

					if (checkstatus.servers) {
						if (checkstatus.servers[selected('catalog')]) {
							showstatus()
						} else {
							checkstatus()
						}
					}

					hidedivs("catalogs");
				};

				return tsdsfeajax("?catalog=^.*");
			}
			
			// Handle dataset drop-down.
			function datasets() {

				datasets.onselect = function () {
					info = tsdsfeajax("?catalog="+selected('catalog')+"&dataset="+selected('dataset'));

					$('#datasetinfo').html("<b>Dataset documentation:</b>")
					$('#datasetinfo').append('<ul style="list-style-position: outside;">');
					$('#datasetinfo ul').append('<li style="">TSDS ID: ' + selected('dataset')+'</li>');
					if (info.length > 0) {
						for (j = 0;j < info.length;j++) {
							if (!info[j].title && !info[j].link) continue;
							if (info[j].title !== "" && info[j].link !== "") {
								$('#datasetinfo ul').append('<li style=""><a href="'+info[j].link+'">'+info[j].title+'</a></li>');
							} else if ((info[j].title === "") && !(info[j].link === "")) {
								$('#datasetinfo ul').append('<li style=""><a href="'+info[j].link+'">'+info[j].link+'</a></li>');
							} else if (!(info[j].text === "")) {
								if (info[j].text.match("/>")) { // Guess HTML

								} else {
									var label =  info[j].title || "Other documentation";
									if (label.match("acknowledgement")) {
										$('#datasetinfo ul').append('<li>'+label+':<font size=-1>'+info[j].text+'</font></li>');
									} else {
										$('#datasetinfo ul').append('<li><a style="text-decoration:underline;cursor:pointer" onclick="showpre(this)">'+label+':</a><pre style="display:none;overflow-x:scroll;">'+info[j].text+'</pre></li>');
									}
								}
							}
						}

					} else {
						if (catalog.info.length > 0) { 
							$('#datasetinfo ul').append('<li style="">Dataset <b>' + selected("dataset") + '</b> was not found in <a href="' + TSDSFE + '?catalog='+selected('catalog')+'&dataset=^.*">catalog list</a></li>');
						} else {
							$('#datasetinfo').hide();
						}
					}
					$('#datasetinfo ul').append('</ul>');
					$('#datasetinfo').show();					
					hidedivs("datasets");
				};

				var list = null;
				delete list;
				list = tsdsfeajax("?catalog="+selected('catalog')+"&dataset=^.*");
				var cat0 = selected('catalog').substring(0,1);
				console.log(list)
				for (var k = 0; k < list.length; k++) {
					if (list[k].label === "") {
						list[k].label = list[k].name;
					}
					if (list[k].label.length > 60) {
						list[k].label = list[k].value + ": " + list[k].label.substring(0,60) + " ...";
					} else if (list[k].label === "") {
						list[k].label = list[k].value  + ": (no label or name in catalog)";						
					} else {
						list[k].label = list[k].value + ": " + list[k].label;
					}
					// Show catalog where it is from 
					if (cat0 === "^") {
						list[k].label = list[k].catalog + "/" + list[k].label;
					}

				}

				function showpre(el) {
					if ($(el).next().is(":visible")) {
						$(el).next().hide();
					} else {
						$(el).next().show();
					}
				}

				function compare(a,b) {
					  if (a.value < b.value) return -1;
					  if (a.value > b.value) return 1;
					  return 0;
				}

				list.sort(compare); // Alpha sort.
				return list
			}
			
			// Handle parameters time drop-downs.			
			function parameters() {
				parameters.clearfollowing = function () {
					if (selected('return')) {
						dorequest();
						return false;
					} else {
						return true;
					}
				}	

				parameters.onselect = function () {
					console.log('parameters.onselect(): Called.');

					$('#datadiv').hide();
					$('#imagediv').hide();					
					var das = tsdsfeajax(
						 "?catalog="
						+ selected('catalog')
						+ "&dataset="
						+ selected('dataset')
						+ "&parameters="
						+ selected('parameters'));

					$('#parameterinfo').html("<b>Parameter information:</b>")
					$('#parameterinfo').show();					
					$('#parameterinfo').append('<ul style="list-style-position: outside;">');

					console.log(das[0])
					if (das.length > 0) {
						var range = das[0].dd.start + " through " + das[0].dd.stop;
						var fills  = das[0].dd.fillvalue || "";
						var units  = das[0].dd.units || "";
						var name  = das[0].dd.name || "";
						var parameter  = das[0].dd.label || "";
						var label = das[0].dd.label || "";	
						var labels = das[0].dd.columnLabels || "";	
						var id  = das[0].dd.id || "";
						$('#parameterinfo ul').append('<li style="">TSDS ID: '+id+'</li>');
						if (name !== "")
							$('#parameterinfo ul').append('<li style="">Name: '+name+'</li>');
						if (label !== "")
							$('#parameterinfo ul').append('<li style="">Label: '+label+'</li>');
						$('#parameterinfo ul')
								.append('<li style="">Availability: '+ range+'</li>');
						$('#parameterinfo ul')
								.append(
											 '<li style="">Cadence: ' 
											+ (das[0].dd.cadence || "<i>Not available</i>")
											+'</li>'
										);
						if (labels !== "")
							$('#parameterinfo ul').append('<li style="">Column Labels: '+labels+'</li>');
						$('#parameterinfo ul')
								.append('<li style="">Column Units: ' 
									+ (units || "<i>Not available</i>")+'</li>');
						$('#parameterinfo ul')
								.append('<li style="">Column Fills: '
									+ (fills|| "<i>Not available</i>")+'</li>');
					} else {
						$('#parameterinfo ul').append('<li style="">Parameter <b>' + selected("parameters") + '</b> was not found in <a href="' + TSDSFE + '?catalog='+selected('catalog')+'&dataset='+selected('dataset')+'&parameters=^.*">dataset list</a></li>');
						
					}
					$('#parameterinfo').append('</ul>');
					hidedivs("parameters");
				};

				parameters.list = tsdsfeajax("?catalog="+selected('catalog')+"&dataset="+selected('dataset')+"&parameters=^.*");
				var list = parameters.list;
				for (var k = 0; k < list.length; k++) {
					var val = list[k].value || list[k].parameters
					var lab = list[k].dd.label || val
					if (lab > 60) {
						lab = val + ": " + lab.substring(0,60) + " ...";
					} 
				}
				
				return list;
			}

			// Handle start time drop-downs.
			function starttime() {
				starttime.clearfollowing = function () {
					if (selected('return')) {
						dorequest();
						return false;
					} else {
						return true;
					}
				}	
				starttime.onselect = function () {
					$('#datadiv').hide();
				};

				info = tsdsfeajax("?catalog="+selected('catalog')+"&dataset="+selected('dataset')+"&parameters="+selected('parameters'));
				var list = [];

				console.log(info)

				list[1] = {};
				list[1].label = info[0].dd.start.replace(/\n/g,"").substring(0,10);
				list[1].value = info[0].dd.start.replace(/\n/g,"").substring(0,10);

				list[0] = {};
				list[0].selected = true;

				if (info[0].dd.cadence === "") {
					list[0].label = "-P3D";
					list[0].value = "-P3D";
				}
				
				if (info[0].dd.cadence.match(/T/)) {
					if (info[0].dd.cadence.match(/H/)) {
						list[0].label = "-P30D";
						list[0].value = "-P30D";
					} else if (info[0].dd.cadence.match(/M/)) {
						list[0].label = "-P3D";
						list[0].value = "-P3D";
					} else {
						list[0].label = "-P2D";
						list[0].value = "-P2D";
					}
				}
				if (!info[0].dd.cadence.match(/T/) && !(info[0].dd.cadence === "")) {
					if (info[0].dd.cadence.match(/Y|M/)) {
						list[0].label = info[0].dd.start;
						list[0].value = info[0].dd.start;
					} else {
						list[0].label = "-P1Y";
						list[0].value = "-P1Y";
					}
				}
				if (info[0].dd.cadence.match(/PT[0-9]D|PT[0-9]Y/)) {
					// Case where T was not supposed to be there.
					if (info[0].dd.cadence.match(/Y/)) {
						list[0].label = info[0].dd.start;
						list[0].value = info[0].dd.start;
					} else {
						list[0].label = "-P1Y";
						list[0].value = "-P1Y";
					}
					
				}

				
				if (!list[0].label) {
					// Make call to determine cadence.
				}
				
				//list[0].label = info[0].dd.start;
				//list[0].value = info[0].dd.start;

				return list;
			}

			// Handle stop time drop-downs.			
			function stoptime() {
				stoptime.clearfollowing = function () {
					if (selected('return')) {
						dorequest();
						return false;
					} else {
						return true;
					}
				}
				stoptime.onselect = function () {
					$('#datadiv').hide();
					$('#returninfo').show();				
				}

				// No need to do this again ...
				info = tsdsfeajax("?catalog="+selected('catalog')+"&dataset="+selected('dataset')+"&parameters="+selected('parameters'));
				var list = [];
				list[0] = {};

				var start = info[0].dd.start.replace(/\n/g,"").substring(0,10);
				var stop = info[0].dd.stop.replace(/\n/g,"").substring(0,10);
				if (info[0].dd.stop.match("P")) {
					var timeRange  = expandISO8601Duration(start+"/"+stop);
					var stop = timeRange.split("/")[1].substring(0,10)
				}
				
				list[0].label = stop;
				list[0].value = stop;
								
				return list;
			}
			
			// Handle return drop-down.
			function returntype() {
				returntype.onselect = function () {
					hidedivs("return");
					$('#formatinfo'+selected('return')).show();
				}				
				var values = [
							{label:"Data", value:"data"},
							{label:"Image", value:"image"},
							{label:"Script", value:"script"}
						];
				return values;
			}

			// Handle format drop-down.
			function format() {
				format.onselect = function () {
					hidedivs("format");
					$("#typeinfo"+selected("return")).show();				
					if (selected("return") === "script") {
						dorequest();
					}
				}
				if (selected("return").match("data")) {
					var values = [
								{label:"Data (native)", value:"ascii-0"},
								{label:"Data (iso)",value:"ascii-1"},
								{label:"Data (yyyy mm dd hh mm ss)",value:"ascii-2"}
							];
				}
				if (selected("return").match("image")) {
					var values = [
								{label:"PNG",value:"png"},
								{label:"PDF",value:"pdf"},
								{label:"SVG",value:"svg"},
								{label:"JNLP",value:"jnlp"},
								{label:"Gallery",value:"viviz"}
							];					
				}
				if (selected("return").match("script")) {
					var values = [
								{label:"IDL",value:"idl"},
								{label:"MATLAB",value:"matlab"},
								{label:"Python",value:"python"},
								{label:"Autoplot",value:"autoplot"}
							];
				}

				return values;
			}

			// Handle type drop-down.
			function type() {

				type.onselect = function () {
					if (selected("return").match("image")) {
						$("#styleinfoimage").show();						
					} else {
						$("#styleinfoimage").hide();
					}
					if (selected("return").match("data")) {
						$("#styleinfodata").show();						
					} else {
						$("#styleinfodata").hide();
					}
					hidedivs("type");
				}
				var values = [];
				if (selected("return").match("image")) {
					values = 
						[
							{label:"Time Series", value:"timeseries", selected:true},
							{label:"Time Series Scaled", value:"timeseriessc"},
							{label:"Time Series Offset", value:"timeseriesscoff"},
							{label:"Autocorrelation", value:"autocorrelation"},
							{label:"Histogram", value:"histogram"},
							{label:"Periodogram", value:"periodogram"},
							{label:"Spectrogram", value:"spectrogram"}
						];
				}
				return values;
			}

			// Handle style drop-down.
			function style() {
				style.onselect = function () {
					dorequest();

				}
				var values = [];
				if (selected("return") === "image") {
				values = 
							[
								{label:"None/Black/Blue", value:"0", selected:true},
								{label:"Black/Yellow/Yellow", value:"1"},
								{label:"Sparkline", value:"2"}
							];
				}
				if (selected("return") === "data") {
					values = 
							[
								{label:"noheader", value:"noheader", selected:true},
								{label:"header", value:"header"}
							];				
				}
				return values;
			}

			// Examples drop-down.
			function examples() {

				var list = examplelist(); // Defined in index-examples.js.

				examples.onselect = function () {
					vid = $("#dropdownstest0").attr('value');
					console.log("Example " + vid + " selected");

					// Find list value.
					for (var k = 0; k < list.length; k++) {
						if (list[k].value === vid) {
							break;
						}
					}
					location.hash = list[k].value;
					main();
				};

				return list;
			}

			// Form URL and place it in DOM based on drop-down state.
			function dorequest() {

				console.log('dorequest(): Called.')
				$("#error").html('');
				$("#errordiv").hide();
				$("#imagediv #image").unbind("error");
				$("#status").hide();

				$("#datadiv").hide()
				$("#scriptdiv").hide()
				$("#imagediv").hide()
				$("#gallerydiv").hide()

				// Form base URL.
				urlo = TSDSFE + "?catalog="
							+ selected('catalog')
							+ "&dataset=" + selected('dataset')
							+ "&parameters=" + selected('parameters')
							+ "&start=" + selected('start')
							+ "&stop=" + selected('stop')
							+ "&return=" + selected('return');

				if (selected('return').match(/script/)) {
					url = urlo + "&format=" + selected('format');
					$("#dlframe").html("");
					$("#dlframe").attr("src", url);
					$("#scriptdiv").show();
				} else if (selected('return').match(/data/)) {

					// TODO:  This needs updating as API has changed.
					if (selected('format') === 'debug') {
						url = urlo
								+ "&out=asc"
								+ "&stream=true"
								+ "&debug=true";
						$("#debugdiv").show();
						$("#debugframe").attr("src", url);
					} else {

						// To work-around bug in how browsers mis-handle
						// concatenated gzip files, request attach=false,
						// which caused back-end to not send concatenated
						// gzip files. See tsdsfe.js code comments for 
						// additional information.
						url = urlo + "&attach=false";

						if (selected('format') !== "ascii-1") { 
							url = url + "&format=" + selected('format');
						}
						if (selected('style') !== "noheader") { 
							url = url + "&style=" + selected('style');
						}
						if (!$("#usedatacache").is(":checked")) {
							url = url + "&usedatacache=false";
						}

						// Remove any existing links that were added.
						$("#datadiv > #datadivheader")
							.empty()
							.append("<a target='_blank'></a>");

						var urld = url

						var urlu = url
									.replace("return=data","return=urilist")
									.replace("&format=" + selected('format'),"")
									.replace("&style=" + selected('style'),"")

						var urlm = TSDSFE + "?catalog="
									+ selected('catalog')
									+ "&dataset=" + selected('dataset')
									+ "&return=tsds"
									+ "&format=json"
									+ "&attach=false"

						// Append additional links
						$("#datadiv > #datadivheader").append("<b>View (new tab):</b> ")
						$("#datadiv > #datadivheader > a")
							.first()
							.clone()
							.appendTo("#datadiv > #datadivheader")
							.html("Data")
							.attr("href", urld)
							.attr("title", urld)
						$("#datadiv > #datadivheader").append("<span> | </span>");
						$("#datadiv > #datadivheader > a")
							.first()
							.clone()
							.appendTo("#datadiv > #datadivheader")
							.html("Metadata")
							.attr("href", urlm)
							.attr("title", urlm)
						$("#datadiv > #datadivheader").append("<span> | </span>");
						$("#datadiv > #datadivheader > a")
							.first()
							.clone()
							.appendTo("#datadiv > #datadivheader")
							.html("URL List")
							.attr("href", urlu)
							.attr("title", urlu)

						// Append additional links
						$("#datadiv > #datadivheader")
							.append("&nbsp;&nbsp;&nbsp;&nbsp;<b>Download:</b> ")
						$("#datadiv > #datadivheader > a")
							.first()
							.clone()
							.appendTo("#datadiv > #datadivheader")
							.html("Data")
							.attr("href", urld.replace("&attach=false", ""))
							.attr("title", urld.replace("&attach=false", ""))
						$("#datadiv > div")
							.append("<span> | </span>");
						$("#datadiv > #datadivheader > a")
							.first()
							.clone()
							.appendTo("#datadiv > #datadivheader")
							.html("Metadata")
							.attr("href", urlm.replace("&attach=false", ""))
							.attr("title", urlm.replace("&attach=false", ""))
						$("#datadiv > #datadivheader").append("<span> | </span>");
						$("#datadiv > #datadivheader > a")
							.first()
							.clone()
							.appendTo("#datadiv > #datadivheader")
							.html("URL List")
							.attr("href", urlu.replace("&attach=false", ""))
							.attr("title", urlu.replace("&attach=false", ""))


						// Clear any existing iframe.
						$("#datadiv > iframe").contents().find("body").html('');

						$("#datadiv > iframe")
							.attr("onload",function () {
								// Fires when src is set. So not really helpful.
								$("#imagediv #imageloading").hide();
								// TODO: Avoid iframe and put data in <pre>?
								// In Chrome perhaps imageloading not needed
								// because spinner shows in tab until numbers
								// appear.
							});
						$("#datadiv > iframe").attr("src", url);
						$("#datadiv").show();

					}					
				} else if (selected('return').match(/image/)) {

					url = urlo 
							+ "&format=" + selected('format')
							+ "&type=" + selected('type')
							+ "&style=" + selected('style');

					if (selected('format').match("viviz")) {

						$("#gallerydiv").show();
						$("#gallerydiv #gallerylink").attr("href", url);
						$("#gallerydiv #gallerylink").attr("title", url);
						$("#gallerydiv #gallerylink").html("Open gallery in new tab");
						// Causes error in Chrome:
						// Uncaught SecurityError: Failed to read the 'contentDocument' property from 'HTMLIFrameElement': Blocked a frame with origin "http://localhost:8004" from accessing a frame with origin "http://localhost:8002". Protocols, domains, and ports must match.
						//$("#gallerydiv > iframe").contents().find("body").html('');
						$("#gallerydiv > iframe").attr("src", url);

					} else if (selected('format').match(/png|svg/)) {

						$("#imagediv").show();
						$("#imagediv #imageloading").show();
						$("#imagediv #imagelink").html("Direct link");
						$("#imagediv #imagelink").attr("href", url);
						$("#imagediv #imagelink").attr("title", url);

						$("#imagediv #image").unbind('error');
						$("#imagediv #image").unbind('load');
						$("#imagediv #image")
							.attr("src", url)
							.css("opacity", "0.2")
							.on("error", function (err) {
								var link = "<a target='_blank' title='"+url+"' "
											+ "href='"+url+"'>Error</a>";
								var msg = link 
											+ " when attempting to retrieve image.";
								$("#error").html(msg);
								$("#errordiv").show();
								$("#imagediv").hide();
								$("#imagediv #imageloading").hide();
								$("#imagediv #image").css("opacity", "1.0");
							})
							.load(function (response, status, xhr) {
								if (status === "error") {
									var msg = "Error when attempting to retrieve image: ";
									$(this).attr("src", "");
									$("#error")
										.html( msg + xhr.status + " " + xhr.statusText )
										.show();
									$("#errordiv").show();
									$("#imagediv").hide();
									$("#imagediv #imageloading").hide();
								}
								$("#imagediv #image").css("opacity", "1.0");
								$("#imagediv #imageloading").hide();
							});

					} else if (selected('format').match(/pdf|jnlp/)) {

						console.log("dorequest(): Creating url for format = " 
									+ selected('format'))

						url = urlo + "&format=" + selected('format');

						$("#imagediv").show();
						$("#imagelink").attr("href", url);
						if (selected('format').match(/pdf/)) {
							$("#imagelink").html("Download PDF<br/>");
						}
						if (selected('format').match(/jnlp/)) {
							$("#imagelink").html("Download JNLP<br/>");
						}
					} else {
						// Error
					}
				}
			}

		</script>
		
	</head>

	<body>

		<div id="options" style="float:left;width:12em;margin-right:14px;margin-top:0em;display:none;">
			<a style="text-decoration:underline;cursor:pointer" id="cachecheckboxeslink">
				Options
			</a>
			<div id="cachecheckboxes" style="display:none">
				<font size="-1">
					<div title="For fastest response time, use cached data (if available).  Disable this for data that change frequently."><input id="usedatacache" type="checkbox" value=""/>&nbsp;Use cached data</div>
					<div title="For fastest response time, use cached metadata (if available).  Disable this for metadata that change frequently."><input id="usemetadatacache" type="checkbox" value=""/>&nbsp;Use cached metadata</div>
					<div title="For fastest response time, use cached images (if available).  Disable this for data that change frequently.  Image cache is not used if cached data option is not selected."><input id="useimagecache" type="checkbox" value=""/>&nbsp;Use cached images</div>
				</font>
			</div>
			<span id="dropdowns0" class="dropdown"></span>
			<span id="dropdowns1" class="dropdown" style="display:none"></span>
			<span id="dropdowns2" class="dropdown" style="display:none"></span>
			<span id="dropdowns3" class="dropdown" style="display:none"></span>
			<span id="dropdowns4" class="dropdown" style="display:none"></span>
			<span id="dropdowns5" class="dropdown" style="display:none"></span>
			<span id="dropdowns6" class="dropdown" style="display:none"></span>
			<span id="dropdowns7" class="dropdown" style="display:none"></span>
			<span id="dropdowns8" class="dropdown" style="display:none"></span>
			<button id="clear" type="button" title="re-set drop-downs" style="background-color:white;color:black;border:1px solid black;margin-top:5px;display:none" onclick="window.location=window.location.pathname">
				Clear
			</button>
		</div>

		<div style="margin-left:14em;margin-top:-5px">
			<font size="-1">
				<span id="status" style="padding:2px;background-color:yellow;"></span>
			</font>
		</div>
		<div id="warningdiv" style="margin-left:14em;display:none;margin-top:4px;">
			<span id="warning" style="padding:2px;background-color:lightgray;"></span>
		</div>
		<div id="errordiv" style="margin-left:14em;display:none;margin-top:4px;">
			<span id="error" style="padding:2px;background-color:#ff3232"></span>
		</div>

		<div id="overviewdiv" style="margin-left:14em;margin-top:-1em">
			<p>
				<br/>
				<b>Overview:</b>
				<ul>
					<li>Use this interface to build a <a href="http://tsds.org/tsdsfe">TSDS Front End (TSDSFE)</a> URL for plots, downloads, and creation of IDL/MATLAB/Python scripts that download data.</li>
					<li>Begin building a URL by selecting a data catalog on the left or try an example URL below.</li>
				</ul>
				<div style="margin-left:2.5em;margin-top:-5px;width:10em;" >
					<span id="dropdownstest0"></span>
				</div>
			</p>
		</div>
		<br/>
	
		<div id="infodiv" style="margin-left:14em;;margin-top:0em;">		
			<div id="scriptdiv" style="background-color:white;display:none;">
				<iframe id="dlframe" style="width:95%;height:20em;"></iframe>
			</div>
			<div id="imagediv" style="background-color:white;width:100%;height:100%;display:none;">
				<div><a id="imagelink" target="_blank"></a>&nbsp;&nbsp;<img id="imageloading" style="height:.7em;display:none" src="css/ajax-loader.gif"/></div>
				<img id="image"></img>
			</div>
			<div id="gallerydiv" style="height:100%;display:none;background-color:white;align:left">
				<div><a id="gallerylink" target="_blank"></a></div>
				<iframe style="width:95%;height:400px;"></iframe>
			</div>
			<div id="datadiv" style="display:none;background-color:white;align:left">
					<div id="datadivheader">
						
					</div>
					<iframe style="width:95%;height:100%;"></iframe>
			</div>
			<div id="styleinfoimage" style="display:none;width:95%">
				<b>Style options</b> (Background/Text/Symbol):
				<ul>
					<li>0: None/Black/Blue (default)</li>
					<li>1: Black/Yellow/Yellow</li>
					<li>2: Spark Line</li>
				</ul>
			</div>			
			<div id="styleinfodata" style="display:none;width:95%">
				<b>Style options</b>:
				<ul>
					<li>noheader (default): No header line.</li>
					<li>header: First line contains parameter name and units (if available).</li>
				</ul>
			</div>			
			<div id="typeinfoimage" style="display:none;width:95%">
				<b>Image type options:</b>
				<ul>
					<li>Time Series (default)</li>
					<li>Time Series Scaled - Each column <code>c</code> is plotted as (<code>c</code>-&mu;)/&sigma;</li>
					<li>Time Series Offset - Each column <code>c</code> is plotted as <code>&Delta;</code> + (<code>c</code>-&mu;)/&sigma; with <code>&Delta;</code> determined automatically.</li>
					<li>Histogram</li>
					<li>Autocorrelation</li>
					<li>Periodogram</li>
					<li>Spectrogram</li>
				</ul>
			</div>			
			<div id="formatinfodata" style="display:none;width:95%">
				<b>Format options:</b>
				<ul>
					<li>ascii-0: Native (if original was ASCII, otherwise same as option 1)</li>
					<li>ascii-1: (default) Space-separated values with <a href="http://www.w3.org/TR/NOTE-datetime">ISO8601</a> timestamps (e.g., <code>2000&#8209;01&#8209;01T00:00:00.0&nbsp;1.1&nbsp;9.0)</code></li>
					<li>ascii-2: Space-separated values with Year Month Day Hour Minute Seconds timestamps</li>
				</ul>
			</div>			
			<div id="formatinfoimage" style="display:none;width:95%">
				<b>Format options:</b>
				<ul>
					<li>PNG: A PNG image with data over selected time range</li>
					<li>PDF: A PDF file with data over selected time range</li>
					<li>SVG: A SVG file with data over selected time range</li>
					<li>JNLP: A JNLP file that downloads and installs Autoplot with data in selected time range.</li>
					<li>Gallery: A gallery of PNG images of data over selected time range (one day of data per image)</li>
				</ul>
			</div>			
			<div id="formatinfoscript" style="display:none;width:95%">
				<b>Format options:</b>
				<ul>
					<li>IDL - A script that when executed in IDL, creates a data array <code>D</code> and label array <code>L</code>.</li>
					<li>MATLAB - A script that when executed in MATLAB, creates a data array <code>D</code> and label array <code>L</code>.</li>
					<li>Python - A script that when executed in Python, creates a data array <code>D</code> and label array <code>L</code>.</li>
					<li>Autoplot - Instructions for viewing a Jython script in Autoplot that downloads and plots data.</li>
				</ul>
			</div>			
			<div id="returninfo" style="display:none;width:95%">
				<b>Return options:</b>
				<ul>
					<li>Data - Data over selected time range</li>
					<li>Image - <a href="http://autoplot.org/">Autoplot</a> graphic or <a href="http://viviz.org/">ViViz</a> gallery of data over selected time range</li>
					<li>Script - A script that reads data into memory for various programing languages</li>
				</ul>
			</div>			
			<div id="parameterinfo" style="display:none;width:95%"></div>
			<div id="citeinfo" style="display:none;width:95%"></div>
			<div id="datasetinfo" style="display:none;width:95%"></div>
			<div id="cataloginfo" style="display:none;width:95%"></div>
			
			<div id="ddinfo" style="display:none;width:95%">
				DD used to generate <a id="link" target='_blank' href="">catalog</a>:
				<input style="width:100%" type="text" value=""></input>
				<button id="trydd" type="button" title="Try DD" style="background-color:white;color:black;border:1px solid black;margin-top:5px">
					Try
				</button>
			</div>

			<div id="statusinfo" style="display:none;width:95%">
				<b>Note:</b>
				<ul>
				</ul>
			</div>
		</div>

		<div id="debugdiv" style="margin-left:14em;background-color:white;width:100%;height:100%;display:none;">
			<div><b>Debug info</b></div>
			<iframe id="debugframe" style="width:95%;height:100%;"></iframe>
		</div>

	</body>
	
</html>

