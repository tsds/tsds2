###################################################
# title: tsds client
# label: tsds client
tr         = getParam( 'timerange', '1997-08-26/1997-09-05', 'timerange to load' )
catalog    = getParam( 'catalog', 'SSCWeb', 'catalog' )
dataset    = getParam( 'dataset', 'ace', 'dataset' )
parameters = getParam( 'parameters', 'X_GEO', 'parameters' )
server     = getParam( 'server', 'http://tsds.org/get/' )
units      = getParam( 'units', 'R_E' )
usecache   = getParam( 'usecache', 'true' )
labels     = getParam( 'labels', '' )
title      = getParam( 'title', 'def' )
fills      = getParam( 'fills', '-1e31')
process    = getParam( 'type', 'timeseries', 'plot type', ['timeseries','timeseriessc','autocorrelation','histogram','periodogram','spectrogram'] )
if ( title=='def' ):
  title= 'Catalog: ' + catalog + ' | Dataset: ' + dataset
print 'v20140718_1057'
#print parameters

drtr  = DatumRangeUtil.parseTimeRange(tr)
tf    = TimeParser.create('$Y-$m-$d')
start = tf.format( drtr.min(), None )
stop  = tf.format( drtr.max(), None )

surl = server + "?" + "catalog=" + catalog + "&dataset=" + dataset + "&parameters=" + parameters + "&start=" + start + "&stop=" + stop
print surl

# note the server may provide a valid but html response.

try:
  f = downloadResourceAsTempFile( URL( surl ), monitor )
except java.io.IOException, ex:
  import org.das2.dataset
  raise org.das2.dataset.NoDataInIntervalException('Could not download and save ' + surl)

#print 'File: '+f.toString()

#from java.io import File
#f = File('/tmp/autoplot_data/fscache/temp/tsds.org/get/000000000@099de20fd')
#print 'xFile: '+f.toString()

from java.io import FileReader, BufferedReader
fo= BufferedReader( FileReader(f) )
line1= fo.readLine()

if line1 is None:
   raise Exception(' tsdsfe.jyds - No data from '+surl)

print 'First line: ' + line1
print 'Labels:' + labels
print 'Fills:' + fills

fo.close()

try:
   from org.virbo.dataset import SemanticOps
   from org.das2.datum import EnumerationUnits
   from org.virbo.dataset import DDataSet
   if ( 1 ):
      if ( len(labels)==0 ):
          ll= parameters.split(',')  
      else:
          ll= labels.split(',')
      eu= EnumerationUnits.create('default')
      lenll= len(ll)
      units= units.split(',')
      fills= fills.split(',')

      if (ll > 1):
           isscalar= False

      #print len(set(units))
      # Not working.   If units are not all the same, we need special treatment.
      #if (len(units) > len(set(units)): Requires newer version of Python
      for i in units:
          if i != units[0]:
            raise Exception(' tsdsfe.jyds - Units must be same for all columns to plot.')
            break

      llds= DDataSet.createRank1(lenll)
      lls = []
      for i in xrange(lenll):
         if ( process == 'timeseriessc' ):
             lls.append('(' + ll[i] + ' - &mu;)/&sigma;')
         if (units[0] == '' or process == 'timeseriessc'):
           llds[i]= eu.createDatum( lls[i]).doubleValue(eu)
         else:
           llds[i]= eu.createDatum( ll[i] + ' [' + units[0] + ']').doubleValue(eu)

      llds.putProperty( QDataSet.UNITS, eu )
      result= getDataSet( 'vap+dat:file://'+f.toString()+'?bundle=1:&depend0=field0' )
      result.putProperty( QDataSet.DEPEND_1, llds )
   else:
      result= getDataSet( 'vap+dat:file://'+f.toString() )
   
   if (isscalar):
     result.putProperty( QDataSet.TITLE, title )
     result.putProperty( QDataSet.UNITS, SemanticOps.lookupUnits(units) )
     result.putProperty( QDataSet.LABEL, labels )
   else:
     result.putProperty( QDataSet.TITLE, title + ' | Parameters: ' + parameters)


   try:
     fv= float(fills[0])
     result.putProperty( QDataSet.FILL_VALUE, fv )   
   except:
     print "Could not convert " + fills[0] + " to a float"

except org.virbo.datasource.HtmlResponseIOException,ex:
   raise org.das2.dataset.NoDataInIntervalException('Problem with response')
except java.lang.IllegalArgumentException, ex:
   raise org.das2.dataset.NoDataInIntervalException('No data in interval')
if ( process == 'timeseriessc' ):
   n = result.property( QDataSet.DEPEND_1 ).length()
   for i in range(0,n):
       m= mean(result[:,i])
       s= stddev(result[:,i])
       ms= '%.2g' % m
       ss= '%.2g' % s
       result[:,i]= (result[:,i]-m)/s
       ll[i] = lls[i] + ';  &mu; = ' + ms + ', &sigma; = ' + ss + ' [' + units[i] + ']'
       llds[i]= eu.createDatum( ll[i]).doubleValue(eu)
   result.putProperty( QDataSet.DEPEND_1, llds )
   print ll
elif ( process=='histogram' ):
    result= autoHistogram(result)
    result= putProperty( result, QDataSet.LABEL, "# in bin" )
    xtags= result.property( QDataSet.DEPEND_0 )
    xtags= putProperty( xtags, QDataSet.UNITS, units[0])
    if (units[0] == ''):
        xtags= putProperty( xtags, QDataSet.LABEL, ll[0])
    else:
        xtags= putProperty( xtags, QDataSet.LABEL, ll[0] + ' [' + units[0] + ']')
elif ( process=='periodogram' ):
    if ( result.rank()==2 ): result= result[:,0]
    result= fftPower(result)
    result= putProperty( result, QDataSet.LABEL, "Power (arb. scale)" )
    xtags= result.property( QDataSet.DEPEND_0 )
    xtags= putProperty( xtags, QDataSet.LABEL, 'f [Hz]')
elif ( process=='spectrogram' ):
    if ( result.rank()==2 ): result= result[:,0]
    result= fftPower(result, 100, None)
    xtags= result.property( QDataSet.DEPEND_0 )
    result= putProperty( result, QDataSet.LABEL, "f [Hz]" ) 