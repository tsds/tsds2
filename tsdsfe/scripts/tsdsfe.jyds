###################################################
# title: tsds client
# label: tsds client
tr         = getParam( 'timerange', '1997-08-26/1997-09-05', 'timerange to load' )
catalog    = getParam( 'catalog', 'SSCWeb', 'catalog' )
dataset    = getParam( 'dataset', 'ace', 'dataset' )
parameters = getParam( 'parameters', 'X_GEO', 'parameters' )
server     = getParam( 'server', 'http://tsds.org/get/' )
units      = getParam( 'units', '' )
usecache   = getParam( 'usecache', 'true' )
labels     = getParam( 'labels', '' )
title      = getParam( 'title', 'def' )
fills      = getParam( 'fills', '-1e31')
#fills      = float(fills)
process    = getParam( 'type', 'timeseries', 'plot type', ['timeseries','autocorrelation','histogram','periodogram','spectrogram'] )
if ( title=='def' ):
  title= 'Catalog: ' + catalog + ' | Dataset: ' + dataset #+ ' | Parameters: ' + parameters
print 'v20140718_1057'
#print parameters

drtr  = DatumRangeUtil.parseTimeRange(tr)
tf    = TimeParser.create('$Y-$m-$d')
start = tf.format( drtr.min(), None )
stop  = tf.format( drtr.max(), None )

surl = server + "?" + "catalog=" + catalog + "&dataset=" + dataset + "&parameters=" + parameters + "&start=" + start + "&stop=" + stop + "&outformat=1&stream=true&usedatacache="+usecache
print surl

# note the server may provide a valid but html response.

f = downloadResourceAsTempFile( URL( surl ), monitor ) 
#print 'File: '+f.toString()

#from java.io import File
#f = File('/Users/robertweigel/autoplot_data/fscache/temp/tsds.org/get/000000000@099de20fd')
#print 'xFile: '+f.toString()

from java.io import FileReader, BufferedReader
fo= BufferedReader( FileReader(f) )
line1= fo.readLine()

if line1 is None:
   raise Exception(' tsds.jyds - No data from '+surl)

print 'First line: ' + line1
print 'Labels:' + labels
print 'Fills:'
print fills

fo.close()


try:
   from org.virbo.dataset import SemanticOps
   from org.das2.datum import EnumerationUnits
   from org.virbo.dataset import DDataSet
   if ( 1 ):
      if ( len(labels)==0 ):
          ll= parameters.split(',')  
      else:
          ll= labels.split(',')
      eu= EnumerationUnits.create('default')
      lenll= len(ll)
      units= units.split(',')
      fills= fills.split(',')

      if (ll > 1):
           isscalar= False

      #print len(set(units))
      # Not working.   If units are not all the same, we need special treatment.
      #if (len(units) > len(set(units)): Requires newer version of Python
      for i in units:
          if i != units[0]:
            raise Exception(' tsds.jyds - Units must be same for all columns to plot.')
            break

      llds= DDataSet.createRank1(lenll)
      for i in xrange(lenll):
         if (units[0] == ''):
           llds[i]= eu.createDatum( ll[i]).doubleValue(eu)
         else:
           llds[i]= eu.createDatum( ll[i] + ' [' + units[0] + ']').doubleValue(eu)

      llds.putProperty( QDataSet.UNITS, eu )
      result= getDataSet( 'vap+dat:file://'+f.toString()+'?bundle=1:&depend0=field0' )
      result.putProperty( QDataSet.DEPEND_1, llds )
   else:
      result= getDataSet( 'vap+dat:file://'+f.toString() )
   
   if (isscalar):
     result.putProperty( QDataSet.TITLE, title )
     result.putProperty( QDataSet.UNITS, SemanticOps.lookupUnits(units) )
     result.putProperty( QDataSet.LABEL, labels )
     result.putProperty( QDataSet.FILL_VALUE, float(fills[0]) )   
   else:
     result.putProperty( QDataSet.TITLE, title + ' | parameter: ' + parameters)
     result.putProperty( QDataSet.FILL_VALUE, float(fills[0]) )   

except org.virbo.datasource.HtmlResponseIOException,ex:
   raise org.das2.dataset.NoDataInIntervalException('Problem with response')
except java.lang.IllegalArgumentException, ex:
   raise org.das2.dataset.NoDataInIntervalException('No data in interval')

if ( process=='histogram' ):
    result= autoHistogram(result)
elif ( process=='periodogram' ):
    if ( result.rank()==2 ): result= result[:,0]
    result= fftPower(result)
elif ( process=='spectrogram' ):
    if ( result.rank()==2 ): result= result[:,0]
    result= fftPower(result)
